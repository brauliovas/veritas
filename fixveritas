#!/bin/bash
# Created by Braulio Vasquez
# Email: braulio_3ri@hotmail.com
# Date: 03/23/2023

# Defining color codes

GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
RESET='\033[0m'
BLUE='\033[0;34m'

#Using one array for each: vcs modules, packages, files and services
# ---- Veritas Clustering ----
declare -a vcsModules=("vxodm" "vxfs" "vxfen" "gab" "vxspec" "vxio" "vxdmp" "vxcafs" "vxportal" "fdd" )
declare -a vcsServices=("vcs" "vxfen" "gab" "llt")
#declare -a vcsPackages=("")
#declare -a vcsFiles=("")
# ---- Veritas Storage Foundation ----
declare -a volumeManagerModules=("vxio" "vxspec" "vxdmp" "fdd" "veki")
#declare -a volumeManagerServices=("vxfs.service" "vxfs-boot" "vxodm.service" "dev-vx.mount" "vxpbx_exchanged.service" "vxvm-reconfig.service" "vxvm-recover.service" "vxvm-vxcloud.service" )
#declare -a volumeManagerPackages=("VRTSvxvm" "VRTSvxfs" "VRTSveki" "VRTSaslapm" "VRTSodm" "VRTSsfcpi" "VRTSspt")
#declare -a volumeManagerFiles=("/etc/vx/vxfs" "/etc/vx/vxfs-startup")

# Grouping all functions

#### Function to check what Veritas product is installed ####
 check_product_version () {
 echo "------- Checking what veritas product is installed -------"
 sleep 3
 clusterPackage=VRTSvcs
 foundationPackage=VRTSvxfs
 if [[ -f /opt/VRTSvcs/bin/hastatus &&  -f /sbin/gabconfig  &&  -f /sbin/lltconfig ]] ;then
   VERSION=$(rpm -q --queryformat "%{VERSION}\n" $clusterPackage)
   PRODUCT=$(rpm -qi $clusterPackage | grep -i Summary | cut -f 2 -d:)
   echo "The following Veritas product is installed:"
   echo "$PRODUCT: $VERSION"
   product="vcs"
   checkModules $product
 else
   VERSION=$(rpm -q --queryformat "%{VERSION}\n" $foundationPackage)
   PRODUCT=$(rpm -qi $foundationPackage | grep -i Summary | cut -f 2 -d:)
   echo "It seems that 'Veritas Cluster Server is not installed'"
   echo "Checking if Veritas Volume Manager is installed"
   if [[ -f /usr/sbin/vxdisk &&  -f /usr/sbin/vxprint  &&  -f /etc/vx/volboot ]] ;then
   echo "The following Veritas product is installed\n: $PRODUCT: $VERSION"
   product="foundation"
   checkModules $product
   else
     echo "It seems that 'Veritas in NOT  installed'"
   fi
 fi
}

#### Function to check if modules are loaded for the specific version ####
check_modules () {
if [[ $product == "vcs"  ]];then
 arrayModules=${vcsModules[@]}
else
 arrayModules=${volumeManagerModules[@]}
fi

echo  "-------- Checking if all modules are loaded --------"
sleep 3
for module in $arrayModules
do
  if [[ `lsmod | grep -w $module` ]];then
  echo -e "${GREEN}It seems that module: "$module " is loaded${RESET}"
 else
  echo -e "${RED}It seems that module: "$module" is NOT loaded${RESET}"
  kofile=($module.ko)
  echo "--- Checking if the ko file exists for module $module on the Server ---"
    if [[ `find  /lib/modules/$(uname -r)/veritas/ -iname $kofile`  ]];then
    echo "--- The module file: $kofile exists, we just need to load it..."
    echo "--- Loading module: $module now"
#    modprobe $module
    else
     echo -e "${RED}--- The file $kofile "does not exist for module${RESET}" $module"
     echo "--- The veritas script needs to be ran to install all missing files/modules"
    fi
 fi
done
}
#### Function to check if all veritas variables have the right value in veritas VCS files ####

check_vcs_variables () {

echo "The following variables should have a value of "1" in the config files"
echo "In file /etc/sysconfig/llt"
echo "LLT_START=1"
echo "LLT_STOP=1"
echo "In file /etc/sysconfig/gab"
echo "GAB_START=1"
echo "GAB_STOP=1"
echo "In file /etc/sysconfig/vcs"
echo "VCS_START=1"
echo "VCS_STOP=1"
echo "In file /etc/sysconfig/vxfen"
echo "VXFEN_START=1"
echo "VXFEN_STOP=1"

echo "-------- Assigning correct value to VCS variables....--------"
sleep 1
sed -i 's/LLT_START=0/LLT_START=1/g' /etc/sysconfig/llt
sed -i 's/LLT_STOP=0/LLT_STOP=1/g' /etc/sysconfig/llt
sed -i 's/GAB_START=0/GAB_START=1/g' /etc/sysconfig/gab
sed -i 's/GAB_STOP=0/GAB_STOP=1/g' /etc/sysconfig/gab
sed -i 's/VCS_START=0/VCS_START=1/g' /etc/sysconfig/vcs
sed -i 's/VCS_STOP=0/VCS_STOP=1/g' /etc/sysconfig/vcs
sed -i 's/VXFEN_START=0/VXFEN_START=1/g' /etc/sysconfig/vxfen
sed -i 's/VXFEN_STOP=0/VXFEN_STOP=1/g' /etc/sysconfig/vxfen

}

#### Function to check if all VCS services are running ####
check_vcs_services {
echo "-------- Checking  all VCS related services status --------"
for service in ${vcsServices[@]}
do
service $service status
done
}

#### Function to restart VCS Services ####

restarting_vcs_services() {
echo "-------- Restarting all VCS related services in the correct order --------"
for service in ${vcsServices[@]}
do
service $service stop
service $service start
done

echo "-------- Restarting LLT and GAB in the required order....--------"

gabconfig -U
lltconfig -U
lltconfig -c
gabconfig -c


echo "-------- Showing VCS related services status....-------- "

check_vcs_services;
}

#### Function to check if an specific Disk group is imported , Called by Function : resourceTypeFunction  ####

is_dg_imported {
      echo "Checking if Disk group is imported..."
      if [[ `vxdg list | grep $ResourceDiskgroup` ]]; then
        echo "Disk group $ResourceDiskgroup is imported"
        echo "Starting all volumes for Diskgroup $ResourceDiskgroup `vxvol -g $ResourceDiskgroup startall`"


      else
        echo -e "${RED}The diskgroup is not imported, it might be imported in another node${RESET}"
        read -p  "Do you want me to try importing it to this node?" -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
        echo "Importing $ResourceDiskgroup... `vxdg import $ResourceDiskgroup`"
          if [[ `vxdg list | grep $ResourceDiskgroup` ]]; then
            echo "It seems that now $ResourceDiskgroup is imported"

          else
            echo -e "${RED}It seems that its still not imported, Try deporting from other nodes first${RESET}"
          fi
        fi
      fi
}

#### Function to check if an specific Filesystem is Mounted , Called by Function : resourceTypeFunction  ####

is_fs_mounted () {
      echo "Checking if Filesystem is mounted"
      if [ df -h $ResourceMountpoint ]; then
       echo -e "${GREEN}The Filesystem is mounted${RESET}"
      else
       echo -e "${RED}The filesystem is not mounted${RESET}"
       echo "We need to check if the mountpoint $ResourceMountpoint  exists"
        if [[ $ResourceMountpoint ]]; then
          echo -e "${GREEN}The mountpoint/folder $ResourceMountpoint exists${RESET}"
        else
          echo -e "${RED}The mountpoint does not exist${RESET}"
          echo "This could be either because the folder does not exist or because another 'Mount' dependency resource is not mounted"
          echo "either, check this mountpoint dependencies"
          hares -dep $res
        fi
      fi
}

#### Function to check the Dependencies of a specific Resource  ####
check_resource_deps () {
      for Dep in `hares -dep $res | awk '{split($1,a,/%/); print a[2], $3}' | grep -vi child | sed 's/ //g'`
      do
       if [[ `hares -state $Dep | grep -i faulted` ]]; then
         echo -e "Dependency $Dep of type: $ResourceType is: ${RED}Faulted${RESET}"
       else
         echo -e "Dependency $Dep of type: $ResourceType is: ${GREEN}Not Faulted${RESET}"
       fi
      done
}

#### Function to The type of a resource which can be used to know how to tacke the issue at hand  ####

resource_type ()  {
case $ResourceType in
 Application)
      echo
      echo -e "${BLUE}Next steps:${RESET}"
      echo "If only this $ResourceType resource if faulted then Contact Application team"
      echo "they need to check the scripts `hares -value $res StartProgram`"
      echo "and `hares -value $res StopProgram`"
      echo "Now if this is not the only resource in faulted status then check"
      echo "if any of the following dependencies is also faulted"
      check_resource_deps $res $ResourceType
      ;;


 Mount)
      ResourceMountpoint=`hares -value $res MountPoint`
      ResourceBlockdevice=`hares -value $res BlockDevice`
      echo "Since the Resource $res is of type $ResourceType, This is what we need to do:"
      ismounted # Calling function to check if this is mounted
      echo "Second, we need to check if the Disk group $ResourceDiskgroup where this mounts is imported"
      ResourceDiskgroup=`hares -value $res BlockDevice | cut -f5 -d/`
      is_dg_imported $ResourceDiskgroup # Calling function to check if the disk group is imported
      ;;

 DiskGroup)
      ResourceDiskgroup=`hares -value $res BlockDevice | cut -f5 -d/`
      echo "Since the Resource $res is of type $ResourceType, This is what we need to do:"
      echo "Is the Disk group $ResourceDiskgroup imported?"
      is_dg_imported
      ;;
esac
}
#### Function to check the status of all resources   ####

check_resource_status () {
echo "CALLING checkResourceStatus FUNCTION "
echo -e "${RED}-------- The following resources are faulted --------${RESET}"
for res in `hares -list State=FAULTED| cut -f 1`
do
echo "----------------------------------------------------------"
echo -e "${RED}------------------------- FAULTED-------------------------${RESET}"
echo "Resource: $res" which belongs to Service group: `hares -value $res Group`
ResourceType=`hares -value $res Type`
echo "Resource Type: $ResourceType"
resource_type $ResourceType
#echo "Removing Faulted Status from Resource... `hares -clear $res"
echo "-----------------------------------------------------------"
done
}

#### Function to check specific resources for a given Service group  ####

check_sg_resources (){
echo "Type the name of a service group"
read serviceGroup

for res in `hares -list State=FAULTED Group=$serviceGroup | cut -f 1`
do
echo -e "Resource name=$res is ${RED}FAULTED${RESET} in Service group $serviceGroup"
ResourceType=`hares -value $res Type`
resource_type $ResourceType
echo
done
}


echo "Select one of the options below:"
echo "1 - Check if VCS modules are loaded"
echo "2 - Check if neccesary VCS files are present on the OS."
echo "3 - Check if VCS services are running"
echo "4 - Check VCS variables"
echo "5 - Check FAULTED resources"
echo "6 - Check FAULTED Service groups"
read response;
case $response in
1) check_product_version;;
2) check_vcs_files;;
3) check_vcs_services;;
4) check_vcs_variables;;
5) check_resource_status;;
6) check_sg_resources;;
esac
